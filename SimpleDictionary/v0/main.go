package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

type Dictrequest struct {
	Transtype string `json:"trans_type"`
	Source    string `json:"source"`
	UserID    string `json:"user_id"`
}

type AutoGenerated struct {
	Prons struct {
		EnUs string `json:"en-us"`
		En   string `json:"en"`
	} `json:"prons"`
	Explanations []string      `json:"explanations"`
	Synonym      []interface{} `json:"synonym"`
	Antonym      []interface{} `json:"antonym"`
	WqxExample   [][]string    `json:"wqx_example"`
	Entry        string        `json:"entry"`
	Type         string        `json:"type"`
	Related      []interface{} `json:"related"`
	Source       string        `json:"source"`
}

func main() {
	client := &http.Client{}
	var data = strings.NewReader(`{"source":"but","trans_type":"auto2zh","request_id":"web_fanyi","media":"text","os_type":"web","dict":true,"cached":true,"replaced":true,"style":"formal","detect":true,"browser_id":"78ae8b55fe83664063236d038e34a173"}`)
	req, err := http.NewRequest("POST", "https://lingocloud.caiyunapp.com/v1/translator", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Accept", "application/json, text/plain, */*")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.9")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Content-Type", "application/json;charset=UTF-8")
	req.Header.Set("Cookie", "_gcl_au=1.1.756836654.1691809977; _ga=GA1.2.1923446979.1691809977; _gid=GA1.2.149159745.1691809978; _ga_65TZCJSDBD=GS1.1.1691809977.1.0.1691809978.0.0.0; _ga_R9YPR75N68=GS1.1.1691809977.1.1.1691809978.59.0.0")
	req.Header.Set("Origin", "https://fanyi.caiyunapp.com")
	req.Header.Set("Referer", "https://fanyi.caiyunapp.com/")
	req.Header.Set("Sec-Fetch-Dest", "empty")
	req.Header.Set("Sec-Fetch-Mode", "cors")
	req.Header.Set("Sec-Fetch-Site", "same-site")
	req.Header.Set("T-Authorization", "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJicm93c2VyX2lkIjoiNzhhZThiNTVmZTgzNjY0MDYzMjM2ZDAzOGUzNGExNzMiLCJpcF9hZGRyZXNzIjoiMTYuMTYyLjE4Ny43MiIsInRva2VuIjoicWdlbXY0anIxeTM4anlxNnZodmkiLCJ2ZXJzaW9uIjoxLCJleHAiOjE2OTE4MTA4Nzl9.m_KvpoZzHzTKbGOK4MRdUab25yVUTKh4eoVgD2adhhQ")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36")
	req.Header.Set("X-Authorization", "token:qgemv4jr1y38jyq6vhvi")
	req.Header.Set("app-name", "xy")
	req.Header.Set("device-id", "78ae8b55fe83664063236d038e34a173")
	req.Header.Set("os-type", "web")
	req.Header.Set("os-version", "")
	req.Header.Set("sec-ch-ua", `"Not/A)Brand";v="99", "Google Chrome";v="115", "Chromium";v="115"`)
	req.Header.Set("sec-ch-ua-mobile", "?0")
	req.Header.Set("sec-ch-ua-platform", `"Windows"`)
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", bodyText)
}
